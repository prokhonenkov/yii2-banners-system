<?php

namespace prokhonenkov\bannerssystem\models;

use prokhonenkov\bannerssystem\helpers\BannerHelper;
use prokhonenkov\bannerssystem\interfaces\BannerInterface;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;

/**
 * This is the model class for table "banners".
 *
 * @property int $id
 * @property string $title
 * @property string $banner_dir
 * @property string $html
 * @property string $link
 * @property int $is_active
 * @property int $zone_id
 * @property string $created_at
 * @property string $updated_at
 *
 * @property Zone $zone
 * @property PageUrl[] $urlsList
 * @property Statistics[] $statistics
 */
class Banner extends \yii\db\ActiveRecord implements BannerInterface
{
	const SCENARIO_TOGGLE = 'toggle';

	public $file;

	public function __construct(array $config = [])
	{
		parent::__construct($config);

		$this->banner_dir = md5(microtime());
	}

	/**
	 * {@inheritdoc}
	 */
	public static function tableName()
	{
		return 'banners';
	}

	/**
	 * {@inheritdoc}
	 */
	public function rules()
	{
		return [
			[['title', 'banner_dir', 'zone_id', 'html', 'zone_id'], 'required'],
			[['html'], 'string'],
			[['is_active', 'zone_id'], 'integer'],
			[['created_at', 'updated_at'], 'safe'],
			[['title', 'banner_dir', 'link'], 'string', 'max' => 255],
			[['zone_id'], 'exist', 'skipOnError' => true, 'targetClass' => Zone::className(), 'targetAttribute' => ['zone_id' => 'id']],
			[['file'], 'file', 'on' => ['create', 'update'], 'extensions' => ['zip', 'jpg', 'jpeg', 'png', 'gif']],
		];
	}

	public function scenarios()
	{
		return ArrayHelper::merge(parent::scenarios(), [
			self::SCENARIO_TOGGLE => ['is_active']
		]);
	}

	/**
	 * {@inheritdoc}
	 */
	public function attributeLabels()
	{
		return [
			'id' => 'ID',
			'title' => \Yii::t('banners-system', 'Title'),
			'banner_dir' => 'Banner Dir',
			'html' => \Yii::t('banners-system', 'Html'),
			'link' => \Yii::t('banners-system', 'Link'),
			'is_active' => \Yii::t('banners-system', 'Status'),
			'zone_id' => \Yii::t('banners-system', 'Banners area'),
			'created_at' => \Yii::t('banners-system', 'Created At'),
			'updated_at' => \Yii::t('banners-system', 'Updated At'),
		];
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getZone()
	{
		return $this->hasOne(Zone::className(), ['id' => 'zone_id']);
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getUrlsList()
	{
		return $this->hasMany(PageUrl::className(), ['banner_id' => 'id']);
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getStatistics()
	{
		return $this->hasMany(Statistics::className(), ['banner_id' => 'id']);
	}

	public function afterSave($insert, $changedAttributes)
	{
		parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

		if($this->scenario === self::SCENARIO_TOGGLE) {
			return;
		}

		PageUrl::batchUpdate(
			$this->id,
			\Yii::$app->request->post('PageUrl') ?? []
		);
	}

	public function afterDelete()
	{
		parent::afterDelete();

		if($this->banner_dir) {
			FileHelper::removeDirectory(BannerHelper::getUploadDir() . DIRECTORY_SEPARATOR . $this->banner_dir);
		}
	}

	/**
	 * @return array
	 */
	public function behaviors()
	{
		return [
			'timestamp' => [
				'class' => TimestampBehavior::class,
				'attributes' => [
					self::EVENT_BEFORE_INSERT => ['created_at'],
					self::EVENT_BEFORE_UPDATE => ['updated_at'],
				],
				'value' => new Expression('NOW()'),
			],
		];
	}

	/**
	 * @param int ...$ids
	 * @return array
	 */
	public static function getBannersByZoneIds(int ...$ids): array
	{
		return (array)self::find()
			->joinWith('statistics', false)
			->innerJoinWith(['urlsList', 'zone'])
			->where([
				'banners.zone_id' => $ids,
				'banners.is_active' => BannerHelper::STATUS_ACTIVE,
				'banners_zones.is_active' => BannerHelper::STATUS_ACTIVE,
			])
			->orderBy(['banners_statistics.created_at' => SORT_DESC])
			->all();
	}

	/**
	 * @param array $ids
	 * @throws \yii\db\Exception
	 */
	public static function setViews(int ...$ids): void
	{
		$data = [];
		foreach ($ids as $id) {
			$data[] = [
				$id,
				Statistics::VIEW,
				date('Y-m-d H:i:s')
			];
		}

		\Yii::$app->db->createCommand()
			->batchInsert(Statistics::tableName(),
				['banner_id', 'action', 'created_at'],
				$data
			)->execute();
	}

	/**
	 * @param int $id
	 */
	public static function setClick(int $id): void
	{
		$stat = new Statistics();
		$stat->action = Statistics::CLICK;
		$stat->banner_id = $id;
		$stat->save();

	}

	/**
	 * @return int
	 */
	public function getId(): int
	{
		return $this->id;
	}

	/**
	 * @return mixed|PageUrl[]
	 */
	public function getUrls()
	{
		return $this->urlsList;
	}

	/**
	 * @return int
	 */
	public function getZoneId(): int
	{
		return $this->zone_id;
	}

	/**
	 * @return int|null
	 */
	public function getZoneHeight(): ?int
	{
		return $this->zone->height;
	}

	/**
	 * @return int|null
	 */
	public function getZoneWidth(): ?int
	{
		return $this->zone->width;
	}

	/**
	 * @return string
	 */
	public function getRedirectUrl(): string
	{
		return $this->link;
	}

	/**
	 * @return string
	 */
	public function getHtml(): string
	{
		return $this->html;
	}
}